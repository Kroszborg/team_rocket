import { SimulationResults, Campaign, OptimizationSuggestion } from './types';

export interface ExportData {
  campaign: Campaign;
  results: SimulationResults;
  optimization: OptimizationSuggestion[];
  exportedAt: Date;
  version: string;
}

// Export as JSON
export function exportAsJSON(data: ExportData): void {
  const jsonString = JSON.stringify(data, null, 2);
  const blob = new Blob([jsonString], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `campaign-results-${data.campaign.name.replace(/[^a-z0-9]/gi, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.json`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

// Export as CSV
export function exportAsCSV(data: ExportData): void {
  const { results } = data;
  
  // Create CSV content
  const csvContent = [
    // Headers
    ['Metric', 'Value'],
    ['Campaign Name', data.campaign.name],
    ['Product', data.campaign.product.name],
    ['Budget', `$${data.campaign.budget.total}`],
    ['Duration', `${data.campaign.budget.duration} days`],
    ['Estimated Reach', results.metrics.estimatedReach.toString()],
    ['Estimated Conversions', results.metrics.estimatedConversions.toString()],
    ['Estimated ROI', `${results.metrics.estimatedROI}%`],
    ['Cost Per Conversion', `$${results.metrics.costPerConversion}`],
    [''],
    ['Channel Breakdown'],
    ['Channel', 'Spend', 'Reach', 'Conversions', 'ROI'],
    ...Object.entries(results.channelBreakdown).map(([channel, metrics]) => [
      channel.charAt(0).toUpperCase() + channel.slice(1),
      `$${metrics.spend}`,
      metrics.reach.toString(),
      metrics.conversions.toString(),
      `${metrics.roi}%`
    ])
  ];
  
  const csvString = csvContent.map(row => 
    row.map(cell => `"${cell.toString().replace(/"/g, '""')}"`).join(',')
  ).join('\n');
  
  const blob = new Blob([csvString], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `campaign-results-${data.campaign.name.replace(/[^a-z0-9]/gi, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.csv`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

// Export as PDF (simplified text-based PDF)
export function exportAsPDF(data: ExportData): void {
  const { campaign, results, optimization } = data;
  
  // Create formatted text content for PDF
  const content = `
VIRTUAL CAMPAIGN LAB - RESULTS REPORT
Generated on: ${new Date().toLocaleDateString()}

CAMPAIGN OVERVIEW
Campaign Name: ${campaign.name}
Product: ${campaign.product.name}
Category: ${campaign.product.category}
Price: $${campaign.product.price}
Total Budget: $${campaign.budget.total}
Duration: ${campaign.budget.duration} days

KEY METRICS
Estimated Reach: ${results.metrics.estimatedReach.toLocaleString()} people
Estimated Conversions: ${results.metrics.estimatedConversions.toLocaleString()}
Estimated ROI: ${results.metrics.estimatedROI}%
Cost per Conversion: $${results.metrics.costPerConversion}

CHANNEL BREAKDOWN
${Object.entries(results.channelBreakdown).map(([channel, metrics]) => 
  `${channel.toUpperCase()}: $${metrics.spend} spend, ${metrics.reach} reach, ${metrics.conversions} conversions, ${metrics.roi}% ROI`
).join('\n')}

OPTIMIZATION SUGGESTIONS
${optimization.map((suggestion, index) => 
  `${index + 1}. ${suggestion.title}\n   ${suggestion.description}\n   Impact: +${suggestion.impact.roi_increase}% ROI, +${suggestion.impact.reach_increase}% Reach`
).join('\n\n')}

---
This report was generated by Adsim
Practice smart, spend smarter.
  `.trim();
  
  const blob = new Blob([content], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = `campaign-report-${campaign.name.replace(/[^a-z0-9]/gi, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.txt`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}

// Share functionality
export async function shareResults(data: ExportData): Promise<void> {
  const { campaign, results } = data;
  
  const shareData = {
    title: `${campaign.name} - Campaign Results`,
    text: `Check out my marketing campaign analysis: ${results.metrics.estimatedReach.toLocaleString()} reach, ${results.metrics.estimatedROI}% ROI!`,
    url: window.location.href,
  };
  
  if (navigator.share && navigator.canShare?.(shareData)) {
    try {
      await navigator.share(shareData);
    } catch (error) {
      if (error instanceof Error && error.name !== 'AbortError') {
        fallbackShare(shareData);
      }
    }
  } else {
    fallbackShare(shareData);
  }
}

function fallbackShare(shareData: { title: string; text: string; url: string }): void {
  // Copy to clipboard as fallback
  const shareText = `${shareData.title}\n\n${shareData.text}\n\n${shareData.url}`;
  
  if (navigator.clipboard) {
    navigator.clipboard.writeText(shareText).then(() => {
      // Show a toast or notification
      alert('Results copied to clipboard!');
    }).catch(() => {
      // Fallback to older method
      legacyFallbackShare(shareText);
    });
  } else {
    legacyFallbackShare(shareText);
  }
}

function legacyFallbackShare(text: string): void {
  const textArea = document.createElement('textarea');
  textArea.value = text;
  textArea.style.position = 'fixed';
  textArea.style.opacity = '0';
  document.body.appendChild(textArea);
  textArea.select();
  
  try {
    document.execCommand('copy');
    alert('Results copied to clipboard!');
  } catch (error) {
    console.error('Failed to copy to clipboard:', error);
    alert('Failed to share results. Please try again.');
  }
  
  document.body.removeChild(textArea);
}

// Generate shareable link
export function generateShareableLink(campaignId: string): string {
  const baseUrl = window.location.origin;
  return `${baseUrl}/campaign/${campaignId}/results`;
}

// Social media sharing
export function shareToTwitter(data: ExportData): void {
  const { campaign, results } = data;
  const text = `Just tested my marketing campaign "${campaign.name}" and got ${results.metrics.estimatedROI}% ROI! ðŸš€ ${results.metrics.estimatedReach.toLocaleString()} reach with Adsim. Practice smart, spend smarter! ðŸ’¡`;
  const url = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(window.location.href)}`;
  window.open(url, '_blank', 'width=600,height=400');
}

export function shareToLinkedIn(data: ExportData): void {
  const { campaign, results } = data;
  const title = `${campaign.name} - Campaign Results`;
  const summary = `Tested my marketing campaign and achieved ${results.metrics.estimatedROI}% ROI with ${results.metrics.estimatedReach.toLocaleString()} estimated reach using Adsim.`;
  const url = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(window.location.href)}&title=${encodeURIComponent(title)}&summary=${encodeURIComponent(summary)}`;
  window.open(url, '_blank', 'width=600,height=400');
}